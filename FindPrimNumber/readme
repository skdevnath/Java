This question is so common that we feel the need to specifically cover it. The naive way is to simply iterate from 2 through n-1, checking for divisibility on each iteration.
    if (n<2){ 
        boolean primeNaive(irvt n ) {
            return false;
        }
        for (int i =2;i <n;i++) {
            if (n % i == 0){ return false;
            }
        }
        return true;
    }
A small but important improvement is to iterate only up through the square root of n.

    boolean primeSlightlyBetter(int n) { 
        if (n<2){
            return false;
        }
        int sqrt = (int) Math.sqrt(n);
        for (inti = 2; i <= sqrt; 1++){
            if (n % i == 0) return false;
        }
        return true;
    }
The sqrt is sufficient because,if n is divisiable by a number greater than its square root then it's divisible by something smaller than it.
